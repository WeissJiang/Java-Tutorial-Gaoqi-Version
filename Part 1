标识符规则 （驼峰规则）
标识符是用来给变量、类、方法以及包进行命名的，规则如下：
标识符必须以字母、下划线、美元符号开头；
标识符的其他部分可以是字母、下划线、美元符号和数字的任意组合；
Java标识符大小写敏感，且长度无限制；
标识符不可以是Java的关键字。
标识符的使用规范
    表示类class名的标识符：每个单词的首字母大写，Main；
    表示方法method和变量variable的标识符，第一个单词小写，从第二个单词开始首字母大写，即驼峰原则，myAge。

变量variable
变量本质上就是代表一个“可操作的存储空间”，空间位置是确定的，但是里面放置什么值不确定。我们可以通过变量名来访问“对应的存储空间”，从而操纵这个“存储空间”存储的值。
变量作为程序中最基本的存储单位，其要素包括变量名，变量类型和作用域。变量在使用前必须对其声明，只有在变量声明以后，才能为其分配相应长度的存储空间。
注意事项：
1.每个变量都有类型，类型可以是基本类型，也可以是引用类型；
2.变量名必须是合法的标识符；
3.变量声明是一条完整的语句，因此每一个声明都必须以分号结束；

在一行中声明多个变量： int i, j;
可以将变量的声明和初始化（赋值）放在同一行中：int i = 18; 即变量的申明（int i；）和赋值（i = 18；）放在一起。

类型：
1.局部变量local variable
方法或语句块内部定义的变量。生命周期是从申明位置开始到方法或语句块执行完毕为止。
2.成员变量member variable
方法外部、类的内部定义的变量。从属于对象，生命周期伴随对象始终。
3.静态变量static variable
使用static定义。从属于类、生命周期伴随类始终，从类加载到卸载。

局部变量local variable
方法或语句块内部定义的变量。生命周期是从申明位置开始到方法或语句块执行完毕为止。局部变量在使用前必须先申明，赋初值再 使用。
public class Main {
    public static void main(String[] args) {
        int i;
        int j = i + 5;  //报错：i未赋初值
    }
}

成员变量member variable
方法外部、类的内部定义的变量。从属于对象，生命周期伴随对象始终。如果不自行赋初值，它会自动初始化成该类型的默认初始值。
int       0
double    0.0
Char     ‘\u0000’
Boolean   false
public class Main {
    int i；
}

常量constant
在Java语言中，主要是利用关键字final来定义一个常量。常量一旦被初始化后不能再更改其值：final int year = 20；
常量命名规范：大写字母和下划线（MAX_VALUE）

基本数据类型primitive types
数值型：byte、short、int、long(L)、float(F)、double；
字符型（文本型）：char；
布尔型：boolean；
Type	Byte	Range
byte	1	[-128, 127]
short	2	[-32K, 32K]
int	4	[-2B, 2B]
long	8	
float	4	
double	8	
char	2	A, B, C,…
boolean	1	True / false


Java语言整型常量的四种表示形式：
十进制整数，如0，1，99
八进制整数，要求以0开头，如015
十六进制整数，要求以0x或0X开头，如0x15
二进制整数，要求以0b或0B开头，如0b01110011
public class Main {
    public static void main(String[] args) {
        int a =15;
        int b = 015; //以0开头的是8进制
        int c = 0x15;  //以0x开头的是16进制
        int d = 0b1101;  //以0b开头的是2进制

        System.out.println(b);
        System.out.println(c);
        System.out.println(d);

        byte age = 30;
        short salary = 30_000;
        int population = 2_000_000_000;   //整型常量默认是int类型
        long globalPopulation = 7_400_000_000L;
    }
}
13
21
13

带小数的数据在Java中称谓浮点型，浮点型可分为float类型和double类型。
float类型又被称作单精度类型，尾数可以精确到7位有效数字，在很多情况下，float类型的精度很难满足需求。
而double表示这种类型的数值精度约是float类型的两倍，又被称作双精度类型。绝大部分应用程序都采用double类型。
浮点型常量默认类型也是double。

Java浮点类型常量有两种表示形式
十进制，如3.14、0.314
科学记数法，如314e2(314*10^2)、314E2(314*10^2)、314e-2(314*10^-2=3.14)

float f = 3.14F;
double d1 = 3.14;
double d1 = 3.14D;

public class Main {
    public static void main(String[] args) {
        float f = 0.1F;
        double d = 1/10;

        System.out.println(f == d);  //浮点数是不精确的，一定不要用于比较
    }
}
false 
Java.math包下面的两个有用的类：BigInteger和BigDecimal，这两个类可以处理任意长度的数值。BigInteger实现了任意精度的整数运算，
BigDecimal实现了任意精度的浮点运算。

package com.package1;
import java.math.BigDecimal;
public class Main {
    public static void main(String[] args) {
        BigDecimal bd = BigDecimal.valueOf(1.0);
        bd = bd.subtract(BigDecimal.valueOf(0.1));
        bd = bd.subtract(BigDecimal.valueOf(0.1));
        bd = bd.subtract(BigDecimal.valueOf(0.1));
        bd = bd.subtract(BigDecimal.valueOf(0.1));
        bd = bd.subtract(BigDecimal.valueOf(0.1));
        System.out.println(bd);
        System.out.println(1.0-0.1-0.1-0.1-0.1-0.1);
    }
}
0.5
0.5000000000000001

字符型变量/常量
char类型用来表示在unicode编码表中的字符。Unicode编码被设计用来处理各种语言的文字，它占两个字节，可允许有65536个字符。
Unicode具有从0到65535之间的编码，它们通常用从‘\u0000’到‘\uffff’之间的十六进制值来表示（前缀为u表示unicode）。
Char c = ‘\u0061’;
public class Main {
    public static void main(String[] args) {
        System.out.println("" + 'a' +'\n' + 'b');  //'\n':换行符
        System.out.println("" + 'a' +'\t' + 'b');  //'\t':制表符
        System.out.println("" + 'a' +'\'' + 'b');  //\':单引号；\"为双引号

        char a = 'T';   //char:单个字符
        String b = "abc";  //String:字符串（字符序列）
    }
}
a
b
a	b
a'b

运算符operator
    
算数运算符	二元运算符	+, -, *, /, %
	一元运算符	+ +, - -
赋值运算符		=(赋值)
扩展运算符		+=, -=, *=, /=
关系运算符		>, <, >=, <=,==(等于),!=(不等于), instanceof
逻辑运算符		&&, ||, !, ^
位运算符		&, |, ^, ~, >>, <<, >>>
条件运算符		?:
字符串连接符		+

算数运算符：需要两个操作数次啊能完成运算的运算符。其中%是取模运算符，就是我们场所的求余数操作。
二元运算符的运算规则：
整数运算：（有long为long，无long为int）
1.如果两个操作数有一个是long，则结果也为long；
2.没有long时，结果为int。即使操作数全为short，byte，结果也是int；
浮点运算：（全为float才是float）
1.如果两个操作数有一个是double，则结果为double；
2.只有两个操作数都是float，则结果才为float。

自增a++（自减a--）
public class Main {
    public static void main(String[] args) {
        int a = 3;
        int b = a++;  //先赋值，再自增
        System.out.println("a=" + a + "\nc=" + b);

        a = 3;
        b = ++a;  //先自增，再赋值
        System.out.println("a=" + a + "\nc=" + b);
    }
}
a=4
c=3
a=4
c=4


赋值及其扩展赋值运算符
public class Main {
    public static void main(String[] args) {
        int a = 3;
        int b = 4;
        a+=b;
        System.out.println("a="+a+"\nb="+b);

        a = 3;
        b = 4;
        a*=b+3;  //即a=a*(b+3)
        System.out.println("a="+a+"\nb="+b);
    }
}
a=7
b=4

关系运算符：用来比较判断，结果只会是布尔值（true/false），适用于数值类型和char。
public static void main(String[] args) {
        int a = 3;
        System.out.println(a==3);
        System.out.println(a!=3);

        char b = 'a';
        char b2 = 'c';
        System.out.println((int)b);  //97
        System.out.println(0+b);  //97
        System.out.println(0+b2);  //99
        System.out.println(b<b2);
    }
true
false
97
97
99
true

逻辑运算符：
&：两个操作数都是true，结果才是true；
|：两个操作数有一个是true，结果为true；
&&：只要有一个是false，则直接返回false；
||：只要有一个是true，则直接返回true；
!：取反，!false为true，!true为false；
^：相同为false，不同为true
public class Main {
    public static void main(String[] args) {
        boolean b1=true;
        boolean b2=false;
        System.out.println(b1&b2);
        System.out.println(b1|b2);
        System.out.println(b1^b2);
        System.out.println(!b2);

        boolean b3=1>2&&2<(3/0);  //&&: 第一个操作数的值为false，则不需要再计算后面的操作数
        System.out.println(b3);
    }
}
false
true
true
true
false

位运算符：
public class Main {
    public static void main(String[] args) {
        int a = 3;                              // a 0 0 1 1
        int b = 4;                              // b 0 1 0 0
        System.out.println(a&b);                // & 0 0 0 0
        System.out.println(a|b);                // | 0 1 1 1
        System.out.println(a^b);                // ^ 0 1 1 1
        System.out.println(~a);                 //~a-1 1 0 0

        int c = 3<<2;     //左移两位，3*2*2
        System.out.println(c);
        System.out.println(12>>1);     //右移一位，12/2
    }
}
0
7
7
-4
12
6

字符串连接符：
public class Main {
    public static void main(String[] args) {
        String a = "3";  //双引号是字符串
        int b = 4;
        int c = 5;
        char d = 'a';    //单引号是char字符
        System.out.println(a+b+c);   //两个+变成连接符
        System.out.println(b+c+a);   //第一个+还是运算符，第二个变成连接符
        System.out.println(d+4);
    }
}
345
93
101

条件运算符：
语法格式： x ? y : z
其中，x为boolean类型的表达式，先计算x的值，若为true，则整个运算的结果为表达式y的值，否则整个运算结果为表达式z的值。
public class Main {
    public static void main(String[] args) {
        int score = 80;
        String type = score<50 ? "Failed" : "Pass";
        System.out.println(type);
    }
}
Pass

public static void main(String[] args) {
        int x= -100;
        System.out.println(x > 0 ? 1 : (x == 0 ? 0 : -1));
    }
-1

public class Main {
    public static void main(String[] args) {
        int score = 80;
        if (score<50) {                             //条件运算
            System.out.println("Failed");
        }
        else {
            System.out.println("Pass");
        }
    }
}
Pass

运算符优先级问题
1.()最优先
2.A||b&&c：运算顺序为a||(b&&c), !(非) 优先于 &&(与) 优先于 ||(或)

自动类型转换
自动类型转换值得是容量小的数据类型可以自动转换为容量大的数据类型。
1.byte -> short -> int -> long -> float -> double；
2.两个int以下类型（包括int、short、byte）的整数运算，其结果为int类型；
3.char -> int；
4.int -> double；
5.int -> float (有精度损失)；
6.long -> double (有精度损失);
7.long -> float (有精度损失)。

强制类型转换casting
强制转换类型，又被称为造型，用于显示的转换一个数值的类型。在有可能丢失信息的情况下进行的转换是通过造型来完成的，但可能造成精度降低或者溢出。
public static void main(String[] args) {
        double x = 3.14;
        int n = (int) x;   //值为3,int是整数类型,这里不是四舍五入,而是直接舍去了小数部分
        char c = 'a';
        int d = c+1;       //c被转换成int类型，a值为97
        System.out.println(n);
        System.out.println(d);
        System.out.println((char)d);
    }
3
98
b

基本类型常见错误
1.操作比较大的数时，要留意是否溢出；
2.把不要命名名字为l的变量，l容易和1混淆，long类型使用时L大写；
//溢出问题
public static void main(String[] args) {
       int money = 1_000_000_000;
       int years = 20;
       int total = money*years;
       //返回的total是负数，超过了int的范围
       System.out.println("total: "+ total);
       //返回的total1仍然是负数，默认是int，因此结果会转变成int值，再转成long，但是已经发生了数据丢失
       long total1 = money*years;
       System.out.println("total: "+ total1);
       //返回的total2是正确的，先将一个因子变成long，整个表达式发生提升，全部用long来计算
       long total2 = money* ((long)years);
       System.out.println("total: "+ total2);
    }
total: -1474836480
total: -1474836480
total: 20000000000

使用Scanner获得键盘输入
public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Name: ");
        String name = scanner.nextLine();
        System.out.println("Hello " + name + ". "+ "Your age?");

        System.out.print("Age: ");
        int age = scanner.nextInt();
        System.out.println("You're " + age + ".");
    }
Name: Weiss
Hello Weiss. Your age?
Age: 26
You're 26.

流程控制语句
1.If单选择结果
2.If-else双选择结构
3.If-else if-else多选择结构
4.Switch结构

If单选择结果
If语句对布尔表达式进行一次判断，如判断结果为真，则执行{}中的语句块，否则跳过该语句块。
if (count > 14){
            System.out.println("Good luck");
        }

If - else双选择结构

public static void main(String[] args) {
        int i = (int)(6 * Math.random())+1;
        System.out.println(i);
        if (i <= 3){
            System.out.println("Small");
        }
        else {
            System.out.println("Large");
        }
}
4
Large

Math类的使用
1.java.lang包中的Math类提供了一些用于数学计算的方法；
2.Math.random()该方法用于产生一个0到1区间的double类型的随机数，不包括1；
    int i = (int)(6 * Math.random());  //产生[0, 6)之间的随机整数

If - else if - else多选择结构
public static void main(String[] args) {
        int i = (int)(6 * Math.random())+1;
        int j = (int)(6 * Math.random())+1;
        int k = (int)(6 * Math.random())+1;
        int count = i + j + k;

        if (14 < count){
            System.out.println("Good luck");
        }
        else if (9 < count){
            System.out.println("Not too bad");
        }
        else {
            System.out.println("Bad luck");
        }
        System.out.println("Get " + count + " points.");
    }
Not too bad
Get 10 points.

Switch多选择结构
注意！：当布尔表达式是等值判断的情况，可以使用if - else if - else多选择结构或者switch结构，如果布尔表达式是区间判断的情况，
则只能使用if - else if - else多选择结构。switch语句会根据表达式的值从相匹配case标签处开始执行，一直执行到break语句处（break表示结束了switch语句）
或者是switch语句的末尾，如果表达式的值与任一case值不匹配，则进入default语句（如果存在default语句的情况）。
public static void main(String[] args) {
        int month = (int)(1+12 *Math.random());
        System.out.println("Month: " + month);

        switch (month){
            case 1:{
                System.out.println("January");
                break;
            }
            case 2:{
                System.out.println("February");
                break;
            }
            default:{
                System.out.println("Other Month");
                break;
            }
        }
    }
Month: 3
Other Month

循环结构
while循环：
在循环刚开始的时候，会计算一次“布尔表达式”的值，若条件为真，执行循环体。而对于后来每一次额外的循环，都会在开始前重新计算一次。
语句中应有使循环趋向于结束的语句，否则会出现无限循环 - “死循环”。
public static void main(String[] args) {
        int i = 0;
        int sum = 0;
        while (i <= 100){
            sum = sum + i;
            i++;            //i++使得i趋向于大于100
        }
        System.out.println(sum);
    }
5050

Do - while循环：
Do-while循环结构会先执行循环体，然后再判断布尔表达式的值，若条件为真，执行循环体，当条件为假时结束循环。do-while循环的循环的体至少执行一次。

for循环：
for循环语句是支持迭代的一种通用结构，是最有效、最灵活的循环结构。for循环在第一次反复之前要进行初始化，即执行初始表达式。随后，对布尔表达式进行判断，
若判断结果为true，即执行迭代因子。
public static void main(String[] args) {
        int sum = 0;
        for (int i = 1; i <=100; i++){  //int i = 1 初始化
            sum = sum + i;              //i <= 100判断
        }                               //{sum = sum + 1} 进行循环  
        System.out.println(sum);        //i++迭代
    }   //输出命令在for循环外，循环完毕再输出
5050

public static void main(String[] args) {
        for (int i = 1, j = i + 10; i <=5; i++, j = i *2){
            System.out.println("i= " + i + " j= " + j);    //输出命令在for循环内，每次循环都会输出
        }
    }
i= 1 j= 11
i= 2 j= 4
i= 3 j= 6
i= 4 j= 8
i= 5 j= 10

无限循环：
编译器姜while(true){}和for(;;){}看作是同一回事，都指的是无限循环。

嵌套循环：
在一个循环语句内部再嵌套一个或者多个循环，称谓嵌套循环。while、do-while和for循环可以任意嵌套多曾。
public static void main(String args[]) {
        for (int i = 1; i <= 5; i++){
            for (int j = 1; j <=5; j++){
                System.out.print(i+ "  ");  //每个i值都输出5遍
            }
            System.out.println();           //每个循环结束换行
        }
    }
1  1  1  1  1  
2  2  2  2  2  
3  3  3  3  3  
4  4  4  4  4  
5  5  5  5  5 

public static void main(String args[]) {
        for (int c = 1; c <= 9; c++){
            for (int r = 1; r <= c; r++){
                System.out.print(r + "*" + c + "=" + (r*c) + "\t");
                //先看里面的for循环，再看外面的for循环
            }
            System.out.println();
        }
    }
1*1=1	
1*2=2	2*2=4	
1*3=3	2*3=6	3*3=9	
1*4=4	2*4=8	3*4=12	4*4=16	
1*5=5	2*5=10	3*5=15	4*5=20	5*5=25	
1*6=6	2*6=12	3*6=18	4*6=24	5*6=30	6*6=36	
1*7=7	2*7=14	3*7=21	4*7=28	5*7=35	6*7=42	7*7=49	
1*8=8	2*8=16	3*8=24	4*8=32	5*8=40	6*8=48	7*8=56	8*8=64	
1*9=9	2*9=18	3*9=27	4*9=36	5*9=45	6*9=54	7*9=63	8*9=72	9*9=81

练习：用循环结构计算100以内的奇数及偶数的和，并输出。
public static void main(String args[]) {
        int sum1 = 0;
        int sum2 = 0;
        for (int i = 1; i <=100; i++){
            if (i%2 == 0){
                sum1 += i;
            }
            else{
                sum1 += i;
            }
        }
        System.out.println("偶数和： " + sum1);  //输出指令要放在for循环外面，不然会每次求和都打印出
        System.out.println("奇数和： " + sum1);
    }
偶数和： 5050
奇数和： 5050

练习：用for循环输出1-100之间能被5整除的数，且每行输出5个。
public static void main(String args[]) {
        int h = 0;
        for (int i = 1; i <=100; i++){
            if (i%5==0){
                System.out.print(i + "\t");
                h++;
                }
            if (h==5){
                System.out.println();
                h=0;
            }
        }
    }
5	10	15	20	25	
30	35	40	45	50	
55	60	65	70	75	
80	85	90	95	100	

Break用于强行退出循环，不执行循环中剩余的语句。
public static void main(String args[]) {
        int total = 0;
        System.out.println("Begin");
        while (true){
            total++;
            int i = (int)Math.round(100*Math.random());
            System.out.println(i);
            if (i == 88){
                break;
            }
        }
        System.out.println("Game over, used" + total + " times.");
    }
Begin
38
29
75
11
5
.
.
.
87
95
56
88
Game over, used166 times.

Continue语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着回到开头，进行下一次是否执行循环的判断。

把100~150之间不能被3整除的数输出，并且每行输出5个。
public static void main(String args[]) {
        int count = 0;
        for (int i = 100; i < 150; i++){
            if (i % 3 == 0){         //如果是3的倍数，则跳过本此循环，继续进行下一次循环
                continue;
            }
            //否则（不是3的倍数），输出该数
            System.out.print(i + ", ");
            //判断每行是否已经输出了5个
            count++;
            if (count % 5 == 0){ 
            System.out.println();
            }
        }
    }
100, 101, 103, 104, 106, 
107, 109, 110, 112, 113, 
115, 116, 118, 119, 121, 
122, 124, 125, 127, 128, 
130, 131, 133, 134, 136, 
137, 139, 140, 142, 143, 
145, 146, 148, 149, 

带标签的break和continue：
“标签”是指后面跟一个冒号的标识符，例如：“label:”。对Java来说唯一用到标签的地方是在循环语句前。而在循环之前设置标签唯一的理由是：我们希望在其中
嵌套另一个循环，由于break和continue关键字通常只中断当前循环，但若随同标签使用，它们就会终端到存在标签的地方。
public static void main(String args[]) {
        //打印输出101-150之间所有的质数
        outer: for (int i = 101; i < 150; i++){
        for (int j = 2; j < i/2; j++){
            if (i % j ==0){
                continue outer;
                //跳出，到outer:for(){}循环，而不是跳到for(){}循环
            }
        }
            System.out.println(i + "\t");
        }
    }
101	
103	
107	
109	
113	
127	
131	
137	
139	
149
